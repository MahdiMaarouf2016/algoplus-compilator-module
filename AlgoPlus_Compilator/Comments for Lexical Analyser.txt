Comments of Lexical Analyser
* Missing signet numbers detection
* //Missing Float numbers detection
* Diffusing between ID and Statments Key words such 'POUR','TANTEQUE','REPETER' ...
* Key words {"POUR","SI","SELON","TANTEQUE","REPETER","JUSQU_A","FIN","NON","ET","OU","MOD","DIV"}




/*
 * StdString DebugAnalyseExpression(NodeExpression * expression)
{
    StdString str = "";

    try
    {
        while(expression)
        {
            qDebug()<<"DEBUG"<<expression->hasExpressionOperator();
            if(dynamic_cast<Reference*>(expression))
            {
                str += dynamic_cast<Reference*>(expression)->toString();
                if(expression->hasExpressionOperator())
                    expression = dynamic_cast<Reference*>(expression)->getExpressionOperator()->SecondOperand;
                else
                    expression = NULL;
            }
            else
            if(dynamic_cast<ConstValue*>(expression))
            {
               str  += dynamic_cast<ConstValue*>(expression)->toString();
               if(expression->hasExpressionOperator())
                   expression = dynamic_cast<ConstValue*>(expression)->getExpressionOperator()->SecondOperand;
               else
                   expression = NULL;
            }
            else
            if(dynamic_cast<FctCall*>(expression))
            {
                str += dynamic_cast<FctCall*>(expression)->toString();
                if(expression->hasExpressionOperator())
                    expression = dynamic_cast<FctCall*>(expression)->getExpressionOperator()->SecondOperand;
                else
                    expression = NULL;
            }
            else
            if(dynamic_cast<Expression*>(expression))
            {
                str += "( " + DebugAnalyseExpression(dynamic_cast<Expression*>(expression)->GetNode()) + ")";
                if(expression->hasExpressionOperator())
                {
                    str += " " + expression->getExpressionOperator()->value->Value() + " ";
                    expression = dynamic_cast<Expression*>(expression)->getExpressionOperator()->SecondOperand;
                }
                else
                    expression = NULL ;
            }
            else
            if(dynamic_cast<ExpressionWithSignelOperator*>(expression))
            {
                str += dynamic_cast<ExpressionWithSignelOperator*>(expression)->getOperator()->Value() + " ";
                str += DebugAnalyseExpression(dynamic_cast<ExpressionWithSignelOperator*>(expression)->GetNode());
                if(expression->hasExpressionOperator())
                {
                    str += " " + expression->getExpressionOperator()->value->Value() + " ";
                    expression = dynamic_cast<ExpressionWithSignelOperator*>(expression)->getExpressionOperator()->SecondOperand;
                }
                else
                    expression = NULL;
            }
            else
            {
                qDebug()<<"No casting expression";
            }

        }
    }
    catch(SyntaxicError error)
    {
        system("cls");
        cout << "****************************************"<<endl<<"*          ANALYSE SYNTAXIC           *"<<endl<< "****************************************" << endl;
        cout << "__________________________________________________________________________"<<endl<<endl;
        cout << error.toString().toStdString() << endl;
    }
    catch(LexicalError error)
    {
        system("cls");
        cout << "****************************************"<<endl<<"*           ANALYSE LEXICALE           *"<<endl<< "****************************************" << endl;
        cout << "__________________________________________________________________________"<<endl<<endl;
        cout << error.toString().toStdString() << endl;
    }
    return str;
}
*/

